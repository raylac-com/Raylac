// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ERC5564Announcement {
  id              Int      @id @default(autoincrement())
  schemeId        Int
  stealthAddress  String
  caller          String
  ephemeralPubKey String
  metadata        String
  blockNumber     BigInt
  logIndex        Int
  txIndex         Int
  chainId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([blockNumber, logIndex, txIndex, chainId])
}

model User {
  id                 Int                  @id @default(autoincrement())
  spendingPubKey     String               @unique
  viewingPubKey      String               @unique
  viewingPrivKey     String               @unique
  name               String
  username           String               @unique
  inviteCode         String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserStealthAddress UserStealthAddress[]
}

model UserStealthAddress {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  address            String
  ephemeralPubKey    String
  viewTag            String
  stealthPubKey      String
  lastSyncedBlockNum BigInt?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ERC20Token {
  id               Int                @id @default(autoincrement())
  contractAddress  String
  name             String
  symbol           String
  decimals         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  transfers        StealthTransfer[]
  ERC20TransferLog ERC20TransferLog[]
}

/// A StealthTransfer consists of multiple ERC20 token trnasfers
/// to disguist the destination address and the amount
model StealthTransfer {
  id             Int                @id @default(autoincrement())
  txHash         String             @unique
  token          ERC20Token         @relation(fields: [tokenId], references: [id])
  tokenId        Int
  innerTransfers ERC20TransferLog[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model ERC20TransferLog {
  id                Int             @id @default(autoincrement())
  token             ERC20Token      @relation(fields: [tokenId], references: [id])
  tokenId           Int
  from              String
  to                String
  amount            BigInt
  blockNumber       BigInt
  logIndex          Int
  txIndex           Int
  chainId           Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  StealthTransfer   StealthTransfer @relation(fields: [stealthTransferId], references: [id])
  stealthTransferId Int

  @@unique([blockNumber, logIndex, txIndex, chainId])
}

model InviteCode {
  inviteCode String  @id
  isUsed     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
