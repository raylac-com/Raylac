// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ERC5564Announcement {
  id              Int      @id @default(autoincrement())
  schemeId        Int
  stealthAddress  String
  caller          String
  ephemeralPubKey String
  metadata        String
  blockNumber     BigInt
  logIndex        Int
  txIndex         Int
  chainId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([blockNumber, logIndex, txIndex, chainId])
}

model User {
  id                      Int     @id @default(autoincrement())
  spendingPubKey          String  @unique
  viewingPubKey           String  @unique
  viewingPrivKey          String  @unique
  encryptedViewingPrivKey String?

  name           String
  username       String  @unique
  profileImage   String?
  devModeEnabled Boolean @default(false)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserStealthAddress UserStealthAddress[]
}

model UserStealthAddress {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          Int
  address         String  @unique
  ephemeralPubKey String
  viewTag         String
  stealthPubKey   String?
  signerAddress   String?
  label           String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AddressSyncStatus AddressSyncStatus[]

  FromTraces Trace[] @relation("From")
  ToTraces   Trace[] @relation("To")
}

model Trace {
  id Int @id @default(autoincrement())

  from String
  to   String

  fromStealthAddress String?
  toStealthAddress   String?

  UserStealthAddressFrom UserStealthAddress? @relation(fields: [fromStealthAddress], references: [address], name: "From")
  UserStealthAddressTo   UserStealthAddress? @relation(fields: [toStealthAddress], references: [address], name: "To")

  amount  BigInt
  tokenId String

  transactionHash String

  logIndex     Int?
  traceAddress String?
  Transaction  Transaction @relation(fields: [transactionHash], references: [hash])

  chainId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([transactionHash, logIndex])
  @@unique([transactionHash, traceAddress])
}

model AddressSyncStatus {
  id Int @id @default(autoincrement())

  address            String
  UserStealthAddress UserStealthAddress @relation(fields: [address], references: [address])
  lastSyncedBlockNum BigInt
  tokenId            String
  chainId            Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([address, chainId, tokenId])
}

model Transaction {
  hash String @id

  blockHash   String
  block       Block   @relation(fields: [blockHash], references: [hash])
  fromAddress String
  toAddress   String?

  chainId Int

  userOps UserOperation[]
  traces  Trace[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOperation {
  hash String @id

  sender         String?
  paymaster      String?
  nonce          Int?
  success        Boolean?
  actualGasCost  BigInt?
  actualGasUsed  BigInt?
  chainId        Int
  tokenPriceAtOp Float?

  Transaction     Transaction? @relation(fields: [transactionHash], references: [hash])
  transactionHash String?
}

enum SyncJob {
  Traces
  UserOps
}

model SyncStatus {
  id                 Int     @id @default(autoincrement())
  lastSyncedBlockNum BigInt
  chainId            Int
  job                SyncJob

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chainId, job])
}

model Block {
  hash String @id

  number    BigInt
  chainId   Int
  timestamp BigInt

  Transaction Transaction[]

  @@unique([number, chainId])
}
