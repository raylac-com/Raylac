// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SyncTask {
  id Int @id @default(autoincrement())

  chainId Int
  address String
  tokenId String

  blockHash   String
  blockNumber BigInt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ERC5564Announcement   ERC5564Announcement @relation(fields: [eRC5564AnnouncementId], references: [id])
  eRC5564AnnouncementId Int

  @@unique([address, chainId, tokenId])
}

model ERC5564Announcement {
  id              Int    @id @default(autoincrement())
  schemeId        Int
  stealthAddress  String
  caller          String
  ephemeralPubKey String
  metadata        String
  blockNumber     BigInt
  address         String

  syncTasks SyncTask[]
  logIndex  Int
  txIndex   Int
  chainId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([blockNumber, logIndex, txIndex, chainId])
}

model User {
  id                      Int    @id @default(autoincrement())
  spendingPubKey          String @unique
  viewingPubKey           String @unique
  encryptedViewingPrivKey String

  name         String
  username     String  @unique
  profileImage String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserStealthAddress UserStealthAddress[]
  AngelRequest       AngelRequest[]
}

model UserStealthAddress {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          Int
  address         String  @unique
  ephemeralPubKey String
  viewTag         String
  signerAddress   String
  label           String?

  userOps UserOperation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  FromTraces Trace[] @relation("From")
  ToTraces   Trace[] @relation("To")
}

model Trace {
  id Int @id @default(autoincrement())

  from String
  to   String

  fromStealthAddress String?
  toStealthAddress   String?

  UserStealthAddressFrom UserStealthAddress? @relation(fields: [fromStealthAddress], references: [address], name: "From")
  UserStealthAddressTo   UserStealthAddress? @relation(fields: [toStealthAddress], references: [address], name: "To")

  amount  Decimal
  tokenId String

  transactionHash String

  logIndex     Int?
  traceAddress String?
  Transaction  Transaction @relation(fields: [transactionHash], references: [hash])

  tokenPriceAtTrace Float?

  chainId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([transactionHash, logIndex])
  @@unique([transactionHash, traceAddress])
}

model Transaction {
  hash String @id

  blockHash   String
  block       Block   @relation(fields: [blockHash], references: [hash])
  fromAddress String
  toAddress   String?

  chainId Int

  logs  Json?
  input String?

  userOps UserOperation[]
  traces  Trace[]
  tag     String?

  UserAction   UserAction? @relation(fields: [userActionId], references: [id])
  userActionId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOperation {
  hash String @id

  sender        String?
  paymaster     String?
  nonce         Int?
  success       Boolean?
  actualGasCost BigInt?
  actualGasUsed BigInt?
  chainId       Int

  Transaction     Transaction? @relation(fields: [transactionHash], references: [hash])
  transactionHash String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  UserStealthAddress UserStealthAddress? @relation(fields: [sender], references: [address])
}

enum SyncJob {
  Traces
  UserOps
  Announcements
}

model SyncStatus {
  id                 Int     @id @default(autoincrement())
  lastSyncedBlockNum BigInt
  chainId            Int
  job                SyncJob

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chainId, job])
}

model Block {
  hash String @id

  number    BigInt
  chainId   Int
  timestamp BigInt?

  Transaction Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([number, chainId])
}

model UserAction {
  id Int @id @default(autoincrement())

  groupTag     String?
  groupSize    Int
  transactions Transaction[]

  txHashes String[] @unique

  timestamp          BigInt
  paidAngelRequest   AngelRequest? @relation(fields: [paidAngelRequestId], references: [id])
  paidAngelRequestId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AngelRequest {
  id Int @id @default(autoincrement())

  title       String
  description String
  amount      Decimal
  userId      Int
  user        User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  paidBy UserAction[]
}
