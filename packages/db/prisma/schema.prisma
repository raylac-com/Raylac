// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ERC5564Announcement {
  id              Int      @id @default(autoincrement())
  schemeId        Int
  stealthAddress  String
  caller          String
  ephemeralPubKey String
  metadata        String
  blockNumber     BigInt
  logIndex        Int
  txIndex         Int
  chainId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([blockNumber, logIndex, txIndex, chainId])
}

model User {
  id             Int     @id @default(autoincrement())
  spendingPubKey String  @unique
  viewingPubKey  String  @unique
  viewingPrivKey String  @unique
  name           String
  username       String  @unique
  profileImage   String?
  inviteCode     String? @unique
  devModeEnabled Boolean @default(false)

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  UserStealthAddress UserStealthAddress[]
}

model UserStealthAddress {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  address            String
  ephemeralPubKey    String
  viewTag            String
  stealthPubKey      String
  lastSyncedBlockNum BigInt?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

enum ExecutionType {
  Transfer
  BridgeTransfer
  AggregateBridgeTransfer
  AggregateTransfer
}

model TransferTrace {
  from    String
  to      String
  amount  BigInt
  tokenId String

  blockNumber  BigInt
  txHash       String
  txPosition   Int
  traceAddress String
  chainId      Int

  executionType ExecutionType
  executionTag  String

  Transaction Transaction @relation(fields: [txHash], references: [hash])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([txHash, traceAddress])
}

model Transaction {
  hash String @id

  blockNumber BigInt
  chainId     Int

  traces  TransferTrace[]
  userOps UserOperation[]

  synchedTraces Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserOperation {
  hash String @id

  sender        String?
  paymaster     String?
  nonce         BigInt?
  success       Boolean?
  actualGasCost BigInt?
  actualGasUsed BigInt?
  chainId       Int

  Transaction     Transaction? @relation(fields: [transactionHash], references: [hash])
  transactionHash String?
}

model InviteCode {
  inviteCode String  @id
  isUsed     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SyncJob {
  Traces
  UserOps
}

model SyncStatus {
  id                 Int     @id @default(autoincrement())
  lastSyncedBlockNum BigInt
  chainId            Int
  job                SyncJob

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chainId, job])
}
