import {
  Hex,
  parseEther,
  parseUnits,
  publicActions,
  toHex,
  zeroAddress,
} from 'viem';
import { client } from './rpc';
import { arbitrum, base, optimism } from 'viem/chains';
import {
  hdKeyToAccount,
  mnemonicToAccount,
  HDKey,
  privateKeyToAccount,
} from 'viem/accounts';
import { TRPCError } from '@trpc/server';
import {
  ETH,
  getPublicClient,
  GetSingleInputSwapQuoteRequestBody,
  GetSingleInputSwapQuoteReturnType,
  getWalletClient,
  signEIP1159Tx,
  sleep,
  SubmitSingleInputSwapRequestBody,
  USDC,
  WST_ETH,
} from '@raylac/shared';

const swap = async () => {
  const account = privateKeyToAccount(
    process.env.TEST_RELAY_PRIVATE_KEY as Hex
  );
  const sender = account.address;

  const swapAmount = parseUnits('1', 6);

  const requestBody: GetSingleInputSwapQuoteRequestBody = {
    sender: sender,
    inputToken: USDC,
    outputToken: ETH,
    amount: swapAmount.toString(),
    inputChainId: base.id,
    outputChainId: base.id,
  };

  /*
  const quote = await client.getSingleInputSwapQuote.mutate(requestBody);

  console.log('quote');
  console.log(JSON.stringify(quote, null, 2));
  await sleep(3000);
  */
  const quote: GetSingleInputSwapQuoteReturnType = {
    approveStep: {
      tx: {
        data: '0x095ea7b300000000000000000000000077a917df7a084b7b3e43517ae28373c2a549262500000000000000000000000000000000000000000000000000000000000f4240',
        to: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913',
        value: '0',
        maxFeePerGas: '15569006',
        maxPriorityFeePerGas: '2578434',
        chainId: 8453,
        gas: 73112,
        nonce: 111,
      },
    },
    swapStep: {
      originChainId: 8453,
      destinationChainId: 8453,
      tx: {
        data: '0x5caab55a00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000f70da97812cb96acdf810712aa562db8dfa3dbef0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda02913000000000000000000000000f2614a233c7c3e7f08b1f887ba133a13f1eb2c550000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000f2614a233c7c3e7f08b1f887ba133a13f1eb2c5500000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001642646478b000000000000000000000000833589fcd6edb6e08f4c7c32d4f71b54bda0291300000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000f489f84f8d34000000000000000000000000a1bea5fe917450041748dbbbe7e9ac57a4bbebab00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000007302833589fcd6edb6e08f4c7c32d4f71b54bda0291301ffff00ab067c01c7f5734da168c699ae9d23a4512c9fdb00f2614a233c7c3e7f08b1f887ba133a13f1eb2c550009c401420000000000000000000000000000000000000601ffff0200a1bea5fe917450041748dbbbe7e9ac57a4bbebab00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006f7c4057fcdce3b215c70b906e87c2fb0f48b90f49482f9a1e1b077b0a6d1bb5',
        to: '0x77a917df7a084b7b3e43517ae28373c2a5492625',
        value: '0',
        maxFeePerGas: '15569006',
        maxPriorityFeePerGas: '2578435',
        chainId: 8453,
        gas: 300000,
        nonce: 112,
      },
    },
    amountIn: {
      amount: '1000000',
      formatted: '1',
      usdValue: '1.0000914075',
      usdValueFormatted: '1',
      tokenPriceUsd: 1.0000914075,
    },
    amountOut: {
      amount: '272836361422279',
      formatted: '0.00027',
      usdValue: '0.9979764912814317991377983507',
      usdValueFormatted: '1',
      tokenPriceUsd: 3657.7840507733,
    },
  };

  const signedApproveTx = quote.approveStep
    ? await signEIP1159Tx({
        tx: quote.approveStep.tx,
        account,
      })
    : null;

  const signedSwapTx = await signEIP1159Tx({
    tx: quote.swapStep.tx,
    account,
  });

  const submitRequestBody: SubmitSingleInputSwapRequestBody = {
    signedApproveStep:
      quote.approveStep && signedApproveTx
        ? { ...quote.approveStep, signature: signedApproveTx }
        : null,
    signedSwapStep: {
      ...quote.swapStep,
      signature: signedSwapTx,
    },
  };

  console.log('submitRequestBody');
  console.log(JSON.stringify(submitRequestBody, null, 2));

  const tx = await client.submitSingleInputSwap.mutate(submitRequestBody);
};

swap();
