import { RaylacAccountExecuteArgs, RaylacAccountV2Abi } from '@raylac/shared';

import { EntryPointAbi } from '@raylac/shared';
import { decodeFunctionData } from 'viem';

const decodeContext = () => {
  const txInput =
    '0x1fad948c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000977844427820a9a7820871a81d701846b04773dd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000493e00000000000000000000000000000000000000000000000000000000000033450000000000000000000000000000000000000000000000000000000000016e360000000000000000000000000000000000000000000000000000000000001d621000000000000000000000000000000000000000000000000000000000001d4c000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000003889ad10193430bb3878b7fe3cca6475c64e8bf9239859387b000000000000000000000000e0cb7871b321e05f37b18dcb6a6d8f09fd6131c600000000000000000000000000000000000000000000000000000000000000000000000000000104da0980c7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023cfd8e6151c72b781cc2fd80948fd1f73efed22b43676be7da5f6cde5383ef4bb000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005554d2734c661548985618221bfefc5bd25adb1e81bf7476a1586923cda38a33d7e79c981e9caf1ab39b7450081a2ef3368e8592a265f615e8454b3cf723d908697a49d7c9a4f3793faa2f04250491cf102372ae071c00000000000000000000000000000000000000000000000000000000000000000000000000000000000041ce71660279435314932865adb8b7dbea16d771031f9e70b7f127c807f25b0a656734195b258b24a8c76debbefec7e374f07c9d02f96af79bd8b90c38984cb56a1b00000000000000000000000000000000000000000000000000000000000000';

  const handleOpsInput = decodeFunctionData({
    abi: EntryPointAbi,
    data: txInput,
  });

  if (handleOpsInput.functionName === 'handleOps') {
    const userOps = handleOpsInput.args[0];

    const executeArgs: RaylacAccountExecuteArgs[] = [];

    for (const userOp of userOps) {
      const data = decodeFunctionData({
        abi: RaylacAccountV2Abi,
        data: userOp.callData,
      });

      if (data.functionName === 'execute') {
        executeArgs.push({
          to: data.args[0],
          value: data.args[1],
          data: data.args[2],
          tag: data.args[3],
        });
      }
    }

    // Check that all execute calls has the same tag
    if (!executeArgs.some(arg => arg.tag !== executeArgs[0].tag)) {
      // All execute calls have the same tag
      const tag = executeArgs[0].tag;
      console.log({ tag });
    }
  }
};

decodeContext();
